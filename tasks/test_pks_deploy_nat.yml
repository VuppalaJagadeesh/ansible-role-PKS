- name: Validate inputs
  tags:
    - pks_deploy_nat
  input_validation:

- name: Find Ops installer     
  tags:
    - pks_deploy_nat
  find:
    paths: /var/www/html/downloads/
    patterns: "pcf*.ova"
  register: ops_ova

- name: Deploy Ops Manager OVA
  tags:
    - pks_deploy_nat
  ops_manager_deploy_ova:
     ovftool_path: "/usr/bin"
     datacenter: "{{ vcenter_datacenter }}"
     datastore: "{{ ops_datastore }}"
     network: "{{ ops_vm_network }}"
     cluster: "{{compute_cluster_name}}"     
     dns_server: "{{ dns_server }}"
     ntp_server: "{{ ntp_servers }}"
     gateway: "{{ ops_gw }}"
     ip_address: "{{ ops_ip }}"
     netmask: "{{ nsx_manager_subnetmask }}"
     admin_password: "{{ ops_admin_password }}"     
     ova_file: "{{ ops_ova.files[0].path }}"
     vcenter: "{{vcenter_host_ip}}"
     vcenter_user: "{{vcenter_user}}"
     vcenter_passwd: "{{vcenter_pwd}}"

- name: Configure Ops-manager auth
  tags:
    - pks_deploy_nat
  ops_manager_configure_auth:
     vcenter: "{{vcenter_host_ip}}"
     vcenter_user: "{{vcenter_user}}"
     vcenter_passwd: "{{vcenter_pwd}}"
     ops_manager_ip: "{{ dnat_destination_ip_for_opsmgr }}"
     ops_user: "{{ ops_username }}"     
     ops_password: "{{ ops_admin_password }}"
     decryption_passphrase: "{{ ops_decryption_password }}"

- ignore_errors: true
  name: Get NSX manager CA cert
  tags:
    - pks_deploy_nat
  get_nsx_manager_ca_cert:
     nsxt_manager: "{{nsx_manager_ip}}"     
     nsxt_user: "admin"
     nsxt_password: "{{nsx_manager_root_pwd}}"
     ca_display_name: "{{ nsxt_cert_name }}"

- name: Edit NSX CA cert
  shell: awk '{printf "%s\\n", $0}' /tmp/ca_cert.log > /tmp/ca_edited.log 
  tags:
    - pks_deploy_nat

- ignore_errors: true
  name: Creating bosh director config file
  template: src=../templates/bosh_template.yml.j2 dest=/opt/chaperone-ansible/roles/pks/defaults/bosh.yml
  tags:
    - pks_deploy_nat

- name: Configure BOSH director
  tags:
    - pks_deploy_nat
  ops_manager_configure_bosh:
     ops_manager_ip: "{{ dnat_destination_ip_for_opsmgr }}"
     ops_user: "{{ ops_username }}"     
     ops_password: "{{ ops_admin_password }}"

- name: Find PKS binary     
  tags:
    - pks_deploy_nat
  find:
    paths: /var/www/html/downloads/
    patterns: "pivotal*.pivotal"
  register: pks_binary

- name: Find PKS stemcell    
  tags:
    - pks_deploy_nat
  find:
    paths: /var/www/html/downloads/
    patterns: "bosh-stemcell*xenial*.tgz"
  register: pks_stemcell

- name: Upload PKS and stemcell
  tags:
    - pks_deploy_nat
  ops_manager_upload_pks_stemcell:
     ops_manager_ip: "{{ dnat_destination_ip_for_opsmgr }}"
     ops_user: "{{ ops_username }}"         
     ops_password: "{{ ops_admin_password }}"
     pks_binary: "{{ pks_binary.files[0].path }}"
     pks_stemcell: "{{ pks_stemcell.files[0].path }}"

- name: Stage PKS
  tags:
    - pks_deploy_nat
  ops_manager_stage_pks:
     ops_manager_ip: "{{ dnat_destination_ip_for_opsmgr }}"
     ops_user: "{{ ops_username }}"  
     ops_password: "{{ ops_admin_password }}"

- name: Generate RSA cert
  tags:
    - pks_deploy_nat
  ops_manager_generate_rsa:
     ops_manager_ip: "{{ dnat_destination_ip_for_opsmgr }}"
     ops_user: "{{ ops_username }}"   
     ops_password: "{{ ops_admin_password }}"
     pks_domain: "{{ pks_api_hostname }}"
     
- name: Edit RSA cert
  shell: awk '{printf "%s\\n", $0}' /tmp/rsa_cert.log > /tmp/rsa_edited.log 
  tags:
    - pks_deploy_nat

- name: Edit RSA key
  shell: awk '{printf "%s\\n", $0}' /tmp/rsa_key.log > /tmp/rsa_key_edited.log 
  tags:
    - pks_deploy_nat


- name: Edit Superuser cert
  shell: awk '{printf "%s\\n", $0}' /home/vmware/pks-nsx-t-superuser.crt > /tmp/pks-nsx-t-su-edit.crt 
  tags:
    - pks_deploy_nat

- name: Edit Superuser key
  shell: awk '{printf "%s\\n", $0}' /home/vmware/pks-nsx-t-superuser.key > /tmp/pks-nsx-t-su-edit.key
  tags:
    - pks_deploy_nat

- name: Get IDs of T0 router, IP blocks
  tags:
    - pks_deploy_nat
  get_nsx_manager_ids:
     nsxt_manager: "{{nsx_manager_ip}}"     
     nsxt_user: "admin"
     nsxt_password: "{{nsx_manager_root_pwd}}"
     floating_ip_pool: "{{ lb_ip_pool_name }}"
     node_ip_block: "{{ node_ip_block_name }}"
     pod_ip_block: "{{ pod_ip_block_name }}"
     t0_router: "{{ t0_router_name }}"
    
- ignore_errors: true
  name: Creating PKS config file
  template: src=../templates/pks_template.yml.j2 dest=/opt/chaperone-ansible/roles/pks/defaults/pks-config.yml
  tags:
    - pks_deploy_nat

  
- name: Deploy PKS(this will take some time)
  tags:
    - pks_deploy_nat
  ops_manager_deploy_pks:
     ops_manager_ip: "{{ dnat_destination_ip_for_opsmgr }}"
     ops_user: "{{ ops_username }}"     
     ops_password: "{{ ops_admin_password }}"

- name: Fetch PKS IP
  tags:
    - pks_deploy_nat
  ops_manager_pks_dnat:
     ops_manager_ip: "{{ dnat_destination_ip_for_opsmgr }}"
     ops_user: "{{ ops_username }}"     
     ops_password: "{{ ops_admin_password }}"
  register: pks_ip

- name: Create DNAT rules for PKS
  tags:
    - pks_deploy_nat
  nsxt_nat_rules:
     hostname: "{{nsx_manager_ip}}" 
     username: "{{nsx_manager_username}}"
     password: "{{nsx_manager_root_pwd}}"
     validate_certs: "{{validate_certs}}"
     router_name: "{{t0_router_name}}"
     action: "{{ dnat_type_for_pks }}"
     match_destination_network: "{{ dnat_destination_ip_for_pks }}"
     translated_network: "{{ pks_ip.output }}"
     enabled: true
     state: present
  when: pks_topology == 'NAT'

  

     

          